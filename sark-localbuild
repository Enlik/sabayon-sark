#!/bin/bash
set -e

export GENKEY_PHASE=${GENKEY_PHASE:-false} # Disable for default.
export VAGRANT_DIR="${VAGRANT_DIR:-$(pwd)}"
export REPOSITORY_NAME="${REPOSITORY_NAME:-$(basename $(pwd))}"
export LC_ALL=en_US.UTF-8
# Speed up test runs by disabling slow syncs and mirror sorts
export SKIP_PORTAGE_SYNC="${SKIP_PORTAGE_SYNC:-0}"
export EQUO_MIRRORSORT="${EQUO_MIRRORSORT:-0}"
export CREATEREPO_PHASE=true
export SAB_WORKSPACE="${SAB_WORKSPACE:-$PWD}"
export SAB_ARCH="${SAB_ARCH:-intel}"
export MAKE_CONF="${MAKE_CONF:-}"
export LOCAL_OVERLAY="${LOCAL_OVERLAY:-$SAB_WORKSPACE/local_overlay}"

if [ -e "$SAB_WORKSPACE/specs/make.conf" ]; then
  echo "You specified a make.conf. I hope you know what are you doing"
  export MAKE_CONF="${MAKE_CONF:-$SAB_WORKSPACE/specs/make.conf}"
fi

. /sbin/sark-functions.sh

if [ ! -e build.yaml ]; then
    echo "Must be run from a repository directory containing a build.yaml"
    exit 1
fi

load_env_from_yaml build.yaml

export OUTPUT_DIR="${VAGRANT_DIR}/artifacts/${REPOSITORY_NAME}-binhost"
export CHECK_BUILD_DIFFS=${CHECK_BUILD_DIFFS:-1}

NEW_BINHOST_MD5=$(mktemp -t "$(basename $0).XXXXXXXXXX")
OLD_BINHOST_MD5=$(mktemp -t "$(basename $0).XXXXXXXXXX")

rm -rfv /usr/portage/packages/* || true

[ -d ${OUTPUT_DIR} ] || mkdir -p "${OUTPUT_DIR}"
[ "$CHECK_BUILD_DIFFS" -eq 1 ] && packages_hash ${VAGRANT_DIR} $REPOSITORY_NAME $OLD_BINHOST_MD5

[ -z "$PORTAGE_CACHE" ] || [ -d "$PORTAGE_CACHE" ] && cp -rfv $PORTAGE_CACHE /usr/portage
[ -z "$DISTFILES" ] || [ -d "$PORTAGE_CACHE" ] && cp -rfv $DISTFILES /usr/portage/distfiles
[ -z "$ENTROPY_DOWNLOADED_PACKAGES" ] || [ -d "$ENTROPY_DOWNLOADED_PACKAGES" ] && cp -rfv $ENTROPY_DOWNLOADED_PACKAGES /var/lib/entropy/client/packages
[ -d "$LOCAL_OVERLAY" ] && cp -rfv $LOCAL_OVERLAY /usr/local/local_portage

PRE_SCRIPT_FILE=$(mktemp -t "$(basename $0).XXXXXXXXXX")
POST_SCRIPT_FILE=$(mktemp -t "$(basename $0).XXXXXXXXXX")

# Prepare and post script
[ -n "${PRE_SCRIPT_COMMANDS}" ] && \
  printf '%s\n' "${PRE_SCRIPT_COMMANDS[@]}" > $PRE_SCRIPT_FILE && \
  cp -rfv $PRE_SCRIPT_FILE /pre-script

[ -n "${POST_SCRIPT_COMMANDS}" ] && \
  printf '%s\n' "${POST_SCRIPT_COMMANDS[@]}" > $POST_SCRIPT_FILE && \
  cp -rfv $POST_SCRIPT_FILE /post-script

if [ -d "$SAB_WORKSPACE"/specs ]; then
  echo "Specs found"
  [ -e "$SAB_WORKSPACE"/specs/custom.mask ] && cp -rfv "$SAB_WORKSPACE/specs/custom.mask" "/opt/sabayon-build/conf/$SAB_ARCH/portage/package.mask/99-custom.mask"
  [ -e "$SAB_WORKSPACE"/specs/custom.unmask ] &&  cp -rfv "$SAB_WORKSPACE/specs/custom.unmask" "/opt/sabayon-build/conf/$SAB_ARCH/portage/package.unmask/99-custom.unmask"
  [ -e "$SAB_WORKSPACE"/specs/custom.use ] &&  cp -rfv "$SAB_WORKSPACE/specs/custom.use" "/opt/sabayon-build/conf/$SAB_ARCH/portage/package.use/99-custom.use"
  [ -e "$SAB_WORKSPACE"/specs/custom.env ] &&  cp -rfv "$SAB_WORKSPACE/specs/custom.env" "/opt/sabayon-build/conf/$SAB_ARCH/portage/package.env"
  [ -e "$SAB_WORKSPACE"/specs/custom.keywords ] &&  cp -rfv "$SAB_WORKSPACE/specs/custom.keywords" "/opt/sabayon-build/conf/$SAB_ARCH/portage/package.keywords/99-custom.keywords"
  [ -d "$SAB_WORKSPACE"/specs/env ] &&  cp -rfv "$SAB_WORKSPACE/specs/env/" "/opt/sabayon-build/conf/$SAB_ARCH/portage/env/"
fi

# Debug what env vars are being passed to the builder
printenv | sort

pushd /
  /usr/bin/tini -s -- /usr/sbin/builder $BUILD_ARGS
popd

rm -rf $PRE_SCRIPT_FILE
rm -rf $POST_SCRIPT_FILE
cp -R /usr/portage/packages/* ${OUTPUT_DIR} || true

ENTROPY_DIR="/${VAGRANT_DIR}/artifacts/${REPOSITORY_NAME}"

cat >/etc/entropy/server.conf <<EOF
# expiration-days = <internal value>
community-mode = enable
weak-package-files = disable
database-format = bz2
# sync-speed-limit =
# server-basic-languages = en_US C
# disabled-eapis = 1,2
# expiration-based-scope = disable
# nonfree-packages-directory-support = disable
rss-feed = enable
changelog = enable
rss-name = packages.rss
rss-base-url = http://packages.sabayon.org/?quicksearch=
rss-website-url = http://www.sabayon.org/
max-rss-entries = 10000
# max-rss-light-entries = 100
rss-light-name = updates.rss
managing-editor =
broken-reverse-deps = disable
default-repository = $REPOSITORY_NAME
repository=$REPOSITORY_NAME|$REPOSITORY_DESCRIPTION|file:///${ENTROPY_DIR}
EOF

entropysrv=$(mktemp)
createrepo=$(mktemp)
TEMPDIR=$(mktemp -d)
export EDITOR=cat

# Checking diffs
if [ "$CHECK_BUILD_DIFFS" -eq 1 ]; then
  echo "*** Checking tbz2 diffs ***"
  # let's do the hash of the tbz2 without xpak data
  packages_hash ${VAGRANT_DIR}  $REPOSITORY_NAME $NEW_BINHOST_MD5
  TO_INJECT=($(diff -ru $OLD_BINHOST_MD5 $NEW_BINHOST_MD5 | grep -v -e '^\+[\+]' | grep -e '^\+' | awk '{print $2}'))
  #if diffs are detected, regenerate the repository
  if diff -q $OLD_BINHOST_MD5 $NEW_BINHOST_MD5 >/dev/null ; then
    echo "No changes where detected, repository generation prevented"

    rm -rf $OLD_BINHOST_MD5 $NEW_BINHOST_MD5
    exit 0
  else
    echo "${TO_INJECT[@]} packages needs to be injected"
    cp -rf "${TO_INJECT[@]}" ${TEMPDIR}/
  fi
fi

built_pkgs=$(find $TEMPDIR -name "*.tbz2" | xargs)
mkdir -p ${ENTROPY_DIR}
[[ -z "${built_pkgs}" ]] && echo "ERROR: no tbz2s found" && exit 2
if [ -d "${ENTROPY_DIR}/standard" ]; then
  echo "=== Repository already exists, syncronizing ==="
  eit unlock $REPOSITORY_NAME || true
  eit pull --quick $REPOSITORY_NAME || true
  #eit sync \$repo
else
  echo "=== Repository is empty, intializing ==="
  echo "Yes" | eit init --quick $REPOSITORY_NAME
  eit push --quick --force
fi

[ -f "${VAGRANT_DIR}/confs/${REPOSITORY_NAME}.pub" ] && [ -f "${VAGRANT_DIR}/confs/${REPOSITORY_NAME}.key" ] && { ! eit key status ${REPOSITORY_NAME}; } && \
eit key import ${REPOSITORY_NAME} ${VAGRANT_DIR}/confs/${REPOSITORY_NAME}.key ${VAGRANT_DIR}/confs/${REPOSITORY_NAME}.pub && { eit key sign ${REPOSITORY_NAME} || true; } && { echo "=== Repository key imported successfully ==="; }
echo "=== Injecting packages ==="
echo "Yes Yes Yes" | eit inject ${built_pkgs} || { echo "ouch unable to inject" && exit 3; }
echo "Yes Yes Yes" | eit commit --quick
echo "=== Pushing built packages locally ==="
eit push --quick --force
